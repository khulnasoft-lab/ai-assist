[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ai_gateway"
version = "0.1.0"
description = "Code generation provided by GitLab.com"
authors = ["GitLab AI Assisted"]
readme = "README.md"
packages = [{ include = "ai_gateway" }]

[tool.poetry.dependencies]
python = "~3.10.0"
fastapi = "^0.108.0"
dependency-injector = "^4.41.0"
uvicorn = { extras = ["standard"], version = "^0.25.0" }
requests = "^2.28.1"
numpy = "^1.24.1"
python-dotenv = "^1.0.0"
fastapi-health = "^0.4.0"
google-cloud-aiplatform = "^1.36.4"
structlog = "^24.0.0"
asgi-correlation-id = "^4.1.0"
prometheus-fastapi-instrumentator = "^7.0.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
starlette-context = "^0.3.6"
google-cloud-profiler = "^4.0.0"
py-grpc-prometheus = "^0.8.0"
tree-sitter = "^0.21.0"
transformers = "^4.37.2"
snowplow-tracker = "^1.0.1"
anthropic = "^0.21.0"
levenshtein = "^0.25.0"
pydantic = "^2.5.2"
pydantic-settings = "^2.1.0"
starlette = "^0.32.0"
httpx = "^0.27.0"
prometheus-client = "^0.20.0"
tree-sitter-languages = "^1.10.2"
jinja2 = "^3.1.3"
pyyaml = "^6.0.1"
google-cloud-discoveryengine = "^0.11.11"
litellm = "^1.35.20"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.2.0"
responses = "^0.25.0"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.0"
pylint = "^3.0.3"
astroid = "^3.0.2"
pytest-watcher = "^0.4.2"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "^7.0.0"
isort = "^5.12.0"
black = "^24.0.0"
pylint = "^3.0.3"
astroid = "^3.0.2"
mypy = "^1.9.0"
types-pyyaml = "^6.0.12.20240311"
types-protobuf = "^4.25.0.20240417"
types-requests = "^2.31.0.20240406"

[tool.pytest.ini_options]
addopts = "--disable-warnings"
testpaths = ["tests"]
filterwarnings = ["error::UserWarning"]

[tool.poetry.scripts]
ai_gateway = "ai_gateway.main:run_app"

[tool.isort]
profile = "black"

[tool.pylint.main]
py-version = "3.10"
jobs = 0
load-plugins = [
    "lints.unsafe_dependency_resolution",
    "lints.direct_environment_variable_reference",
]

[tool.pylint.messages_control]
disable = [
  "missing-module-docstring",
  "missing-function-docstring",
  "line-too-long",
  "missing-class-docstring",
  "c-extension-no-member",
  "too-few-public-methods",
  "pointless-string-statement",
  "no-member",
  "useless-import-alias",
  "fixme",
  "no-else-return",
  "unused-argument",
  "protected-access",
  "too-many-arguments",
  "no-name-in-module",
  "dangerous-default-value",
  "too-many-locals",
  "invalid-overridden-method",
  "consider-using-generator",
  "use-dict-literal",
  "import-self",
  "import-error",
  "import-outside-toplevel",
  "inconsistent-return-statements",
  "too-many-function-args",
  "arguments-differ",
  "unused-import",
  "unspecified-encoding",
  "redefined-builtin",
  "arguments-renamed",
  "keyword-arg-before-vararg",
  "raise-missing-from",
  "unnecessary-lambda",
  "too-many-ancestors",
  "useless-parent-delegation",
  "consider-using-in",
  "abstract-method",
  "broad-exception-caught",
  "too-many-instance-attributes",
  "consider-using-sys-exit",
  "use-implicit-booleaness-not-comparison",
  "broad-exception-raised",
  "unused-variable",
  "too-many-statements",
  "unidiomatic-typecheck",
  "redefined-outer-name",
  "pointless-statement",
  "use-a-generator",
  "singleton-comparison",
  "duplicate-code",
  "cyclic-import",
  "too-many-boolean-expressions",
  "redefined-argument-from-local",
  "undefined-variable"
]
enable = [
  "unsafe-dependency-resolution",
  "direct-environment-variable-reference",
]

[tool.pylint.reports]
score = "no"

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
